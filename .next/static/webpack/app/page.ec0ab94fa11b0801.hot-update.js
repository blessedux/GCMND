"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Home; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dynamic */ \"(app-pages-browser)/./node_modules/next/dist/api/app-dynamic.js\");\n/* harmony import */ var _components_CameraControls__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/CameraControls */ \"(app-pages-browser)/./src/components/CameraControls.tsx\");\n/* harmony import */ var _components_GestureDisplay__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/GestureDisplay */ \"(app-pages-browser)/./src/components/GestureDisplay.tsx\");\n/* harmony import */ var _components_SimpleCameraTest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/SimpleCameraTest */ \"(app-pages-browser)/./src/components/SimpleCameraTest.tsx\");\n/* harmony import */ var _components_MediaPipeStatus__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/MediaPipeStatus */ \"(app-pages-browser)/./src/components/MediaPipeStatus.tsx\");\n/* harmony import */ var _lib_gestureDetection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/lib/gestureDetection */ \"(app-pages-browser)/./src/lib/gestureDetection.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n// Dynamically import p5 to avoid SSR issues\nconst Sketch = (0,next_dynamic__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(()=>__webpack_require__.e(/*! import() */ \"_app-pages-browser_src_components_Sketch_tsx\").then(__webpack_require__.bind(__webpack_require__, /*! @/components/Sketch */ \"(app-pages-browser)/./src/components/Sketch.tsx\")), {\n    loadableGenerated: {\n        modules: [\n            \"app/page.tsx -> \" + \"@/components/Sketch\"\n        ]\n    },\n    ssr: false\n});\n_c = Sketch;\nfunction Home() {\n    _s();\n    const [cameraStatus, setCameraStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        status: \"waiting\",\n        message: \"Camera: Click button to start (Privacy Mode)\"\n    });\n    const [multiHandData, setMultiHandData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        leftHand: null,\n        rightHand: null,\n        totalHands: 0\n    });\n    const [showOpenHandIndicator, setShowOpenHandIndicator] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const handsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const cameraRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Initialize MediaPipe Hands\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        let retryCount = 0;\n        const maxRetries = 3;\n        const loadMediaPipeScripts = async ()=>{\n            if (false) {}\n            try {\n                console.log(\"Attempt \".concat(retryCount + 1, \": Starting MediaPipe script loading...\"));\n                // Check if scripts are already loaded\n                if (window.Hands && window.Camera) {\n                    console.log(\"MediaPipe scripts already loaded\");\n                    initializeMediaPipe();\n                    return;\n                }\n                // Load MediaPipe scripts dynamically\n                const scripts = [\n                    \"https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils/camera_utils.js\",\n                    \"https://cdn.jsdelivr.net/npm/@mediapipe/control_utils/control_utils.js\",\n                    \"https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils/drawing_utils.js\",\n                    \"https://cdn.jsdelivr.net/npm/@mediapipe/hands/hands.js\"\n                ];\n                // Load scripts sequentially to ensure proper initialization\n                for (const src of scripts){\n                    await new Promise((resolve, reject)=>{\n                        const script = document.createElement(\"script\");\n                        script.src = src;\n                        script.crossOrigin = \"anonymous\";\n                        script.onload = ()=>{\n                            console.log(\"Loaded: \".concat(src));\n                            resolve(true);\n                        };\n                        script.onerror = (e)=>{\n                            console.error(\"Failed to load: \".concat(src), e);\n                            reject(new Error(\"Failed to load \".concat(src)));\n                        };\n                        document.head.appendChild(script);\n                    });\n                }\n                console.log(\"Loading MediaPipe scripts...\");\n                for (const src of scripts){\n                    await new Promise((resolve, reject)=>{\n                        const script = document.createElement(\"script\");\n                        script.src = src;\n                        script.crossOrigin = \"anonymous\";\n                        script.onload = ()=>{\n                            console.log(\"Loaded: \".concat(src));\n                            resolve(true);\n                        };\n                        script.onerror = (e)=>{\n                            console.error(\"Failed to load: \".concat(src), e);\n                            reject(new Error(\"Failed to load \".concat(src)));\n                        };\n                        document.head.appendChild(script);\n                    });\n                }\n                // Wait for scripts to initialize\n                console.log(\"Waiting for MediaPipe to initialize...\");\n                await new Promise((resolve)=>setTimeout(resolve, 3000));\n                initializeMediaPipe();\n            } catch (error) {\n                console.error(\"Failed to load MediaPipe scripts (attempt \".concat(retryCount + 1, \"):\"), error);\n                if (retryCount < maxRetries) {\n                    retryCount++;\n                    console.log(\"Retrying MediaPipe loading (\".concat(retryCount, \"/\").concat(maxRetries, \")...\"));\n                    setTimeout(loadMediaPipeScripts, 2000);\n                } else {\n                    setCameraStatus({\n                        status: \"error\",\n                        message: \"Error: MediaPipe failed to load after multiple attempts\",\n                        error: \"MediaPipe script loading failed - check internet connection\"\n                    });\n                }\n            }\n        };\n        const initializeMediaPipe = ()=>{\n            try {\n                if (window.Hands) {\n                    const Hands = window.Hands;\n                    handsRef.current = new Hands({\n                        locateFile: (file)=>{\n                            return \"https://cdn.jsdelivr.net/npm/@mediapipe/hands/\".concat(file);\n                        }\n                    });\n                    handsRef.current.setOptions({\n                        maxNumHands: 2,\n                        modelComplexity: 1,\n                        minDetectionConfidence: 0.7,\n                        minTrackingConfidence: 0.7,\n                        selfieMode: true\n                    });\n                    handsRef.current.onResults(onResults);\n                    console.log(\"MediaPipe Hands initialized successfully\");\n                    setCameraStatus({\n                        status: \"waiting\",\n                        message: \"Camera: MediaPipe ready, click to start (Privacy Mode)\"\n                    });\n                } else {\n                    throw new Error(\"MediaPipe Hands not available after loading\");\n                }\n            } catch (error) {\n                console.error(\"Failed to initialize MediaPipe Hands:\", error);\n                setCameraStatus({\n                    status: \"error\",\n                    message: \"Error: MediaPipe initialization failed\",\n                    error: \"MediaPipe Hands initialization failed - try refreshing the page\"\n                });\n            }\n        };\n        loadMediaPipeScripts();\n    }, []);\n    const onResults = (results)=>{\n        var _results_multiHandLandmarks;\n        console.log(\"MediaPipe results received:\", {\n            hasLandmarks: !!results.multiHandLandmarks,\n            landmarkCount: ((_results_multiHandLandmarks = results.multiHandLandmarks) === null || _results_multiHandLandmarks === void 0 ? void 0 : _results_multiHandLandmarks.length) || 0,\n            hasHandedness: !!results.multiHandedness\n        });\n        if (results.multiHandLandmarks) {\n            let leftHand = null;\n            let rightHand = null;\n            // Process each hand\n            for(let i = 0; i < results.multiHandLandmarks.length; i++){\n                const landmarks = results.multiHandLandmarks[i];\n                const handedness = results.multiHandedness ? results.multiHandedness[i] : null;\n                console.log(\"Processing hand \".concat(i, \":\"), {\n                    handedness: handedness === null || handedness === void 0 ? void 0 : handedness.label,\n                    confidence: handedness === null || handedness === void 0 ? void 0 : handedness.score,\n                    landmarkCount: landmarks.length\n                });\n                // Determine which hand this is\n                const isLeftHand = handedness && handedness.label === \"Left\";\n                const isRightHand = handedness && handedness.label === \"Right\";\n                // Process gesture detection\n                const gestureResult = (0,_lib_gestureDetection__WEBPACK_IMPORTED_MODULE_7__.detectAllGestures)(landmarks);\n                console.log(\"Hand \".concat(i, \" gesture:\"), gestureResult);\n                const handData = {\n                    landmarks,\n                    gesture: gestureResult.gesture,\n                    confidence: gestureResult.confidence\n                };\n                // Store hand data\n                if (isLeftHand || !isRightHand && leftHand === null) {\n                    leftHand = handData;\n                }\n                if (isRightHand || !isLeftHand && rightHand === null) {\n                    rightHand = handData;\n                }\n            }\n            // Update state\n            const totalHands = (leftHand ? 1 : 0) + (rightHand ? 1 : 0);\n            setMultiHandData({\n                leftHand,\n                rightHand,\n                totalHands\n            });\n            // Check for open hand indicator\n            const hasOpenHand = (leftHand === null || leftHand === void 0 ? void 0 : leftHand.gesture) === \"openHand\" || (rightHand === null || rightHand === void 0 ? void 0 : rightHand.gesture) === \"openHand\";\n            setShowOpenHandIndicator(hasOpenHand);\n            console.log(\"Updated hand data:\", {\n                leftHand: !!leftHand,\n                rightHand: !!rightHand,\n                totalHands\n            });\n        } else {\n            setMultiHandData({\n                leftHand: null,\n                rightHand: null,\n                totalHands: 0\n            });\n            setShowOpenHandIndicator(false);\n            console.log(\"No hands detected\");\n        }\n    };\n    const handleCameraRequest = async ()=>{\n        setCameraStatus({\n            status: \"requesting\",\n            message: \"Camera: Requesting permission...\"\n        });\n        try {\n            console.log(\"Starting camera request...\");\n            // Check if MediaPipe is loaded\n            if (!window.Hands) {\n                throw new Error(\"MediaPipe Hands not loaded. Please refresh the page and try again.\");\n            }\n            // Request camera access with simpler constraints first\n            const stream = await navigator.mediaDevices.getUserMedia({\n                video: {\n                    width: {\n                        ideal: 640\n                    },\n                    height: {\n                        ideal: 480\n                    },\n                    facingMode: \"user\"\n                }\n            });\n            console.log(\"Camera stream obtained:\", stream);\n            // Set up video element\n            if (videoRef.current) {\n                videoRef.current.srcObject = stream;\n                await videoRef.current.play();\n                // Hide the actual video feed for privacy\n                videoRef.current.style.display = \"none\";\n                console.log(\"Video element set up successfully\");\n            }\n            setCameraStatus({\n                status: \"active\",\n                message: \"Camera: Active (Privacy Mode)\"\n            });\n            // Wait a bit for video to be ready\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n            // Initialize MediaPipe camera processing\n            if (handsRef.current && videoRef.current) {\n                console.log(\"Initializing MediaPipe camera processing...\");\n                // Try MediaPipe Camera utility first\n                if (window.Camera) {\n                    try {\n                        console.log(\"Attempting to use MediaPipe Camera utility...\");\n                        const Camera = window.Camera;\n                        cameraRef.current = new Camera(videoRef.current, {\n                            onFrame: async ()=>{\n                                if (handsRef.current && videoRef.current) {\n                                    try {\n                                        await handsRef.current.send({\n                                            image: videoRef.current\n                                        });\n                                    } catch (frameError) {\n                                        console.warn(\"Frame processing error in Camera utility:\", frameError);\n                                    }\n                                }\n                            },\n                            width: 640,\n                            height: 480\n                        });\n                        await cameraRef.current.start();\n                        console.log(\"MediaPipe camera processing started successfully with Camera utility\");\n                        return;\n                    } catch (cameraError) {\n                        console.warn(\"MediaPipe Camera utility failed, trying manual approach:\", cameraError);\n                    }\n                }\n                // Fallback: Manual frame processing with better error handling\n                console.log(\"Using manual frame processing...\");\n                let frameCount = 0;\n                let errorCount = 0;\n                const processFrame = async ()=>{\n                    if (handsRef.current && videoRef.current && videoRef.current.readyState === videoRef.current.HAVE_ENOUGH_DATA) {\n                        try {\n                            frameCount++;\n                            await handsRef.current.send({\n                                image: videoRef.current\n                            });\n                            errorCount = 0; // Reset error count on success\n                            // Log success every 30 frames (about once per second)\n                            if (frameCount % 30 === 0) {\n                                console.log(\"✅ Frame processing working - processed \".concat(frameCount, \" frames\"));\n                            }\n                        } catch (error) {\n                            errorCount++;\n                            console.error(\"Frame processing error (\".concat(errorCount, \"):\"), error);\n                            // If too many consecutive errors, stop processing\n                            if (errorCount > 10) {\n                                console.error(\"Too many consecutive frame processing errors, stopping\");\n                                return;\n                            }\n                        }\n                    }\n                    requestAnimationFrame(processFrame);\n                };\n                // Start manual processing\n                processFrame();\n                console.log(\"Manual frame processing started\");\n            } else {\n                console.error(\"MediaPipe components not available:\", {\n                    hands: !!handsRef.current,\n                    video: !!videoRef.current,\n                    Camera: !!window.Camera\n                });\n                // More specific error message\n                if (!handsRef.current) {\n                    throw new Error(\"MediaPipe Hands not initialized - try refreshing the page\");\n                } else if (!videoRef.current) {\n                    throw new Error(\"Video element not available\");\n                } else {\n                    throw new Error(\"MediaPipe not initialized - unknown error\");\n                }\n            }\n        } catch (error) {\n            console.error(\"Camera access failed:\", error);\n            let errorMessage = \"Camera access failed\";\n            if (error.name === \"NotAllowedError\") {\n                errorMessage = \"Camera permission denied. Please allow camera access in your browser settings.\";\n            } else if (error.name === \"NotFoundError\") {\n                errorMessage = \"No camera found. Please connect a camera and try again.\";\n            } else if (error.name === \"NotReadableError\") {\n                errorMessage = \"Camera is in use by another application. Please close other camera apps.\";\n            } else if (error.message.includes(\"MediaPipe\")) {\n                errorMessage = error.message;\n            }\n            setCameraStatus({\n                status: \"error\",\n                message: \"Camera: Failed\",\n                error: errorMessage\n            });\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"container\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_GestureDisplay__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                multiHandData: multiHandData,\n                showOpenHandIndicator: showOpenHandIndicator\n            }, void 0, false, {\n                fileName: \"/Users/JoaquinNam/Desktop/MENTE_MAESTRA/web3/GCMND/src/app/page.tsx\",\n                lineNumber: 370,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_SimpleCameraTest__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {}, void 0, false, {\n                fileName: \"/Users/JoaquinNam/Desktop/MENTE_MAESTRA/web3/GCMND/src/app/page.tsx\",\n                lineNumber: 375,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_MediaPipeStatus__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {}, void 0, false, {\n                fileName: \"/Users/JoaquinNam/Desktop/MENTE_MAESTRA/web3/GCMND/src/app/page.tsx\",\n                lineNumber: 376,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_CameraControls__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                onCameraRequest: handleCameraRequest,\n                cameraStatus: cameraStatus\n            }, void 0, false, {\n                fileName: \"/Users/JoaquinNam/Desktop/MENTE_MAESTRA/web3/GCMND/src/app/page.tsx\",\n                lineNumber: 378,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"canvas-container\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Sketch, {\n                    multiHandData: multiHandData,\n                    videoRef: videoRef\n                }, void 0, false, {\n                    fileName: \"/Users/JoaquinNam/Desktop/MENTE_MAESTRA/web3/GCMND/src/app/page.tsx\",\n                    lineNumber: 384,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/JoaquinNam/Desktop/MENTE_MAESTRA/web3/GCMND/src/app/page.tsx\",\n                lineNumber: 383,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/JoaquinNam/Desktop/MENTE_MAESTRA/web3/GCMND/src/app/page.tsx\",\n        lineNumber: 369,\n        columnNumber: 5\n    }, this);\n}\n_s(Home, \"467bv3oDJl33QpgkcauA+zXSYAU=\");\n_c1 = Home;\nvar _c, _c1;\n$RefreshReg$(_c, \"Sketch\");\n$RefreshReg$(_c1, \"Home\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/page.tsx\n"));

/***/ })

});