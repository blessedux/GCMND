"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_components_Sketch_tsx",{

/***/ "(app-pages-browser)/./src/components/Sketch.tsx":
/*!***********************************!*\
  !*** ./src/components/Sketch.tsx ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Sketch; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! p5 */ \"(app-pages-browser)/./node_modules/p5/lib/p5.min.js\");\n/* harmony import */ var p5__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(p5__WEBPACK_IMPORTED_MODULE_2__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nfunction Sketch(param) {\n    let { multiHandData, videoRef } = param;\n    _s();\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const p5InstanceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const smoothedLandmarksRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        leftHand: null,\n        rightHand: null\n    });\n    const framePersistenceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        leftHandFrames: 0,\n        rightHandFrames: 0\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!canvasRef.current) return;\n        const sketch = (p)=>{\n            let objectVector;\n            let objectSize = 1;\n            let lastObjectSize = 1;\n            let objectSizeSmooth = 0;\n            let grabbing = false;\n            let locked = false;\n            p.setup = ()=>{\n                objectVector = p.createVector(100, 0, 0);\n                p.createCanvas(800, 640, p.WEBGL);\n                p.frameRate(60); // Set to 60 FPS for smooth rendering\n                // Use system font instead of loading custom font\n                try {\n                    p.textFont('system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif');\n                } catch (error) {\n                    console.warn(\"Font loading failed, using default:\", error);\n                    // Fallback to default font\n                    p.textFont(\"Arial\");\n                }\n                p.textSize(12);\n            };\n            p.draw = ()=>{\n                p.clear();\n                p.push();\n                p.translate(0, 0, -100);\n                p.pop();\n                // Enhanced gesture display\n                p.strokeWeight(5);\n                // Color based on gesture type (using primary hand)\n                let gestureColor;\n                const primaryHand = multiHandData.leftHand || multiHandData.rightHand;\n                if (primaryHand) {\n                    switch(primaryHand.gesture){\n                        case \"pinch\":\n                            gestureColor = p.color(255, 0, 0); // Red\n                            break;\n                        case \"fist\":\n                            gestureColor = p.color(255, 165, 0); // Orange\n                            break;\n                        case \"openHand\":\n                            gestureColor = p.color(0, 255, 0); // Green\n                            break;\n                        case \"pointing\":\n                            gestureColor = p.color(0, 255, 255); // Cyan\n                            break;\n                        case \"victory\":\n                            gestureColor = p.color(255, 0, 255); // Magenta\n                            break;\n                        default:\n                            gestureColor = p.color(128, 128, 128); // Gray\n                    }\n                } else {\n                    gestureColor = p.color(128, 128, 128); // Gray\n                }\n                p.stroke(gestureColor);\n                // Draw gesture indicator line\n                const lineLength = primaryHand ? primaryHand.confidence * 300 : 0;\n                p.line(0, 0, lineLength, 0);\n                // Draw object which is being dragged\n                p.push();\n                p.fill(0, 0, 255, 100);\n                p.stroke(0, 0, 255);\n                p.translate(objectVector.x, objectVector.y, objectVector.z);\n                p.ellipse(0, 0, 100 * p.map(objectVector.z, 0.1, -0.1, 0.1, objectSizeSmooth), 100 * p.map(objectVector.z, 0.1, -0.1, 0.1, objectSizeSmooth));\n                p.pop();\n                // Draw landmarks\n                displayResults(p);\n                // Enhanced gesture-based interaction\n                if ((primaryHand === null || primaryHand === void 0 ? void 0 : primaryHand.gesture) === \"pinch\") {\n                    grabbing = true;\n                } else {\n                    grabbing = false;\n                }\n                // Handle grabbing interaction with the object\n                if (grabbing && primaryHand) {\n                    // Use thumb tip (4) and index tip (8) for pinch position\n                    const thumbTip = primaryHand.landmarks[4];\n                    const indexTip = primaryHand.landmarks[8];\n                    // Calculate pinch center position\n                    const pinchX = (thumbTip.x + indexTip.x) / 2;\n                    const pinchY = (thumbTip.y + indexTip.y) / 2;\n                    const pinchZ = (thumbTip.z + indexTip.z) / 2;\n                    // Map to world coordinates\n                    let pinchVector = p.createVector(pinchX * p.width - p.width / 2, pinchY * p.height - p.height / 2, pinchZ);\n                    if (p.dist(pinchVector.x, pinchVector.y, objectVector.x, objectVector.y) < 50 && locked == false) {\n                        locked = true;\n                        objectSize = 2;\n                    }\n                    if (locked) {\n                        objectVector.x = pinchVector.x;\n                        objectVector.y = pinchVector.y;\n                        objectVector.z = pinchVector.z;\n                    }\n                } else {\n                    locked = false;\n                    objectSize = 1;\n                }\n                // Smooth object size\n                objectSizeSmooth = objectSize * 0.5 + lastObjectSize * 0.5;\n                lastObjectSize = objectSizeSmooth;\n                // Draw privacy indicator only\n                drawPrivacyIndicator(p);\n            };\n            // Enhanced smoothing with persistence\n            const smoothLandmarks = function(currentLandmarks, previousLandmarks) {\n                let smoothingFactor = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0.2;\n                if (!currentLandmarks || currentLandmarks.length === 0) {\n                    return previousLandmarks; // Keep previous landmarks if no new ones\n                }\n                if (!previousLandmarks || previousLandmarks.length !== currentLandmarks.length) {\n                    return currentLandmarks;\n                }\n                return currentLandmarks.map((landmark, index)=>{\n                    const prev = previousLandmarks[index];\n                    if (!prev) return landmark;\n                    // More aggressive smoothing for stability\n                    return {\n                        x: prev.x + (landmark.x - prev.x) * smoothingFactor,\n                        y: prev.y + (landmark.y - prev.y) * smoothingFactor,\n                        z: prev.z + (landmark.z - prev.z) * smoothingFactor\n                    };\n                });\n            };\n            function displayResults(p) {\n                // Smooth left hand landmarks\n                if (multiHandData.leftHand) {\n                    const smoothedLeft = smoothLandmarks(multiHandData.leftHand.landmarks, smoothedLandmarksRef.current.leftHand);\n                    smoothedLandmarksRef.current.leftHand = smoothedLeft;\n                    if (smoothedLeft) {\n                        // Draw left hand landmarks (green)\n                        p.stroke(0, 255, 0); // Green for left hand\n                        p.strokeWeight(4);\n                        p.fill(0, 255, 0, 100);\n                        // Draw connections between landmarks for better visualization\n                        for(let i = 0; i < smoothedLeft.length; i++){\n                            const landmark = smoothedLeft[i];\n                            const x = landmark.x * p.width - p.width / 2;\n                            const y = landmark.y * p.height - p.height / 2;\n                            const z = landmark.z;\n                            // Draw landmark point\n                            p.push();\n                            p.translate(x, y, z);\n                            p.sphere(3);\n                            p.pop();\n                        }\n                        // Draw hand connections (finger bones)\n                        drawHandConnections(p, smoothedLeft, 0, 255, 0);\n                    }\n                } else {\n                    // Keep previous landmarks for a few frames to prevent flashing\n                    if (smoothedLandmarksRef.current.leftHand) {\n                        const lastLeft = smoothedLandmarksRef.current.leftHand;\n                        p.stroke(0, 255, 0, 50); // Fade out\n                        p.strokeWeight(2);\n                        p.fill(0, 255, 0, 30);\n                        for(let i = 0; i < lastLeft.length; i++){\n                            const landmark = lastLeft[i];\n                            const x = landmark.x * p.width - p.width / 2;\n                            const y = landmark.y * p.height - p.height / 2;\n                            const z = landmark.z;\n                            p.push();\n                            p.translate(x, y, z);\n                            p.sphere(2);\n                            p.pop();\n                        }\n                    }\n                }\n                // Smooth right hand landmarks\n                if (multiHandData.rightHand) {\n                    const smoothedRight = smoothLandmarks(multiHandData.rightHand.landmarks, smoothedLandmarksRef.current.rightHand);\n                    smoothedLandmarksRef.current.rightHand = smoothedRight;\n                    if (smoothedRight) {\n                        // Draw right hand landmarks (blue)\n                        p.stroke(0, 0, 255); // Blue for right hand\n                        p.strokeWeight(4);\n                        p.fill(0, 0, 255, 100);\n                        // Draw connections between landmarks for better visualization\n                        for(let i = 0; i < smoothedRight.length; i++){\n                            const landmark = smoothedRight[i];\n                            const x = landmark.x * p.width - p.width / 2;\n                            const y = landmark.y * p.height - p.height / 2;\n                            const z = landmark.z;\n                            // Draw landmark point\n                            p.push();\n                            p.translate(x, y, z);\n                            p.sphere(3);\n                            p.pop();\n                        }\n                        // Draw hand connections (finger bones)\n                        drawHandConnections(p, smoothedRight, 0, 0, 255);\n                    }\n                } else {\n                    // Keep previous landmarks for a few frames to prevent flashing\n                    if (smoothedLandmarksRef.current.rightHand) {\n                        const lastRight = smoothedLandmarksRef.current.rightHand;\n                        p.stroke(0, 0, 255, 50); // Fade out\n                        p.strokeWeight(2);\n                        p.fill(0, 0, 255, 30);\n                        for(let i = 0; i < lastRight.length; i++){\n                            const landmark = lastRight[i];\n                            const x = landmark.x * p.width - p.width / 2;\n                            const y = landmark.y * p.height - p.height / 2;\n                            const z = landmark.z;\n                            p.push();\n                            p.translate(x, y, z);\n                            p.pop();\n                        }\n                    }\n                }\n            }\n            function drawHandConnections(p, landmarks, r, g, b) {\n                // MediaPipe hand connections (finger bones)\n                const connections = [\n                    // Thumb\n                    [\n                        0,\n                        1\n                    ],\n                    [\n                        1,\n                        2\n                    ],\n                    [\n                        2,\n                        3\n                    ],\n                    [\n                        3,\n                        4\n                    ],\n                    // Index finger\n                    [\n                        0,\n                        5\n                    ],\n                    [\n                        5,\n                        6\n                    ],\n                    [\n                        6,\n                        7\n                    ],\n                    [\n                        7,\n                        8\n                    ],\n                    // Middle finger\n                    [\n                        0,\n                        9\n                    ],\n                    [\n                        9,\n                        10\n                    ],\n                    [\n                        10,\n                        11\n                    ],\n                    [\n                        11,\n                        12\n                    ],\n                    // Ring finger\n                    [\n                        0,\n                        13\n                    ],\n                    [\n                        13,\n                        14\n                    ],\n                    [\n                        14,\n                        15\n                    ],\n                    [\n                        15,\n                        16\n                    ],\n                    // Pinky\n                    [\n                        0,\n                        17\n                    ],\n                    [\n                        17,\n                        18\n                    ],\n                    [\n                        18,\n                        19\n                    ],\n                    [\n                        19,\n                        20\n                    ],\n                    // Palm connections\n                    [\n                        5,\n                        9\n                    ],\n                    [\n                        9,\n                        13\n                    ],\n                    [\n                        13,\n                        17\n                    ]\n                ];\n                p.stroke(r, g, b, 150);\n                p.strokeWeight(2);\n                p.noFill();\n                for (const [start, end] of connections){\n                    if (landmarks[start] && landmarks[end]) {\n                        const startX = landmarks[start].x * p.width - p.width / 2;\n                        const startY = landmarks[start].y * p.height - p.height / 2;\n                        const startZ = landmarks[start].z;\n                        const endX = landmarks[end].x * p.width - p.width / 2;\n                        const endY = landmarks[end].y * p.height - p.height / 2;\n                        const endZ = landmarks[end].z;\n                        p.line(startX, startY, startZ, endX, endY, endZ);\n                    }\n                }\n            }\n            function drawGestureDebug(p) {\n                p.push();\n                p.fill(255);\n                p.textAlign(p.LEFT);\n                p.textSize(14);\n                let yPos = -p.height / 2 + 20;\n                p.text(\"Multi-Hand Gesture Debug:\", -p.width / 2 + 10, yPos);\n                yPos += 20;\n                // Left hand info\n                if (multiHandData.leftHand) {\n                    p.text(\"Left Hand: \".concat(multiHandData.leftHand.gesture, \" (\").concat(Math.round(multiHandData.leftHand.confidence * 100), \"%)\"), -p.width / 2 + 10, yPos);\n                    yPos += 15;\n                } else {\n                    p.text(\"Left Hand: Not detected\", -p.width / 2 + 10, yPos);\n                    yPos += 15;\n                }\n                // Right hand info\n                if (multiHandData.rightHand) {\n                    p.text(\"Right Hand: \".concat(multiHandData.rightHand.gesture, \" (\").concat(Math.round(multiHandData.rightHand.confidence * 100), \"%)\"), -p.width / 2 + 10, yPos);\n                    yPos += 15;\n                } else {\n                    p.text(\"Right Hand: Not detected\", -p.width / 2 + 10, yPos);\n                    yPos += 15;\n                }\n                // Combined info\n                yPos += 10;\n                const primaryHand = multiHandData.leftHand || multiHandData.rightHand;\n                p.text(\"Primary: \".concat((primaryHand === null || primaryHand === void 0 ? void 0 : primaryHand.gesture) || \"None\"), -p.width / 2 + 10, yPos);\n                yPos += 15;\n                p.text(\"Confidence: \".concat(Math.round(((primaryHand === null || primaryHand === void 0 ? void 0 : primaryHand.confidence) || 0) * 100), \"%\"), -p.width / 2 + 10, yPos);\n                yPos += 15;\n                p.text(\"Hands Detected: \".concat(multiHandData.totalHands), -p.width / 2 + 10, yPos);\n                p.pop();\n            }\n            function drawPrivacyIndicator(p) {\n                p.push();\n                p.fill(0, 255, 0, 150);\n                p.textAlign(p.RIGHT);\n                p.textSize(12);\n                // Draw privacy indicator in top-right corner\n                p.text(\"Privacy Mode: Hand Tracking Only\", p.width / 2 - 10, -p.height / 2 + 20);\n                p.pop();\n            }\n        };\n        p5InstanceRef.current = new (p5__WEBPACK_IMPORTED_MODULE_2___default())(sketch, canvasRef.current);\n        return ()=>{\n            if (p5InstanceRef.current) {\n                p5InstanceRef.current.remove();\n                p5InstanceRef.current = null;\n            }\n        };\n    }, [\n        multiHandData\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: canvasRef\n    }, void 0, false, {\n        fileName: \"/Users/JoaquinNam/Desktop/MENTE_MAESTRA/web3/GCMND/src/components/Sketch.tsx\",\n        lineNumber: 389,\n        columnNumber: 10\n    }, this);\n}\n_s(Sketch, \"umpYknO+N0S2uVmhqVc72AyrWQg=\");\n_c = Sketch;\nvar _c;\n$RefreshReg$(_c, \"Sketch\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Sketch.tsx\n"));

/***/ })

});